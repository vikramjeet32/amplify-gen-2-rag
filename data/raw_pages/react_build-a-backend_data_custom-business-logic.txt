Add custom queries and mutations
The
a.model()
data model provides a solid foundation for querying, mutating, and fetching data. However, you may need additional customizations to meet specific requirements around custom API requests, response formatting, and/or fetching from external data sources.
In the following sections, we walk through the three steps to create a custom query or mutation:
Define a custom query or mutation
Configure custom business logic handler code
Invoke the custom query or mutation
For every custom query or mutation, you need to set a return type and, optionally, arguments. Use
a.query()
or
a.mutation()
to define your custom query or mutation in your
amplify/data/resource.ts
file:
Custom query
Custom mutation
After your query or mutation is defined, you need to author your custom business logic. You can either define it in a
function
or using a
custom resolver powered by AppSync JavaScript resolver
.
Function
Custom resolver powered by AppSync JavaScript resolvers
In your
amplify/data/echo-handler/
folder, create a
handler.ts
file. You can import a utility type for your function handler via the
Schema
type from your backend resource. This gives you type-safe handler parameters and return values.
In your
amplify/data/resource.ts
file, define the function using
defineFunction
and then reference the function with your query or mutation using
a.handler.function()
as a handler.
If you want to use an existing Lambda function, you can reference it by its name:
a.handler.function('name-of-existing-lambda-fn')
. Note that Amplify will not update this external Lambda function or its dependencies.
Custom resolvers work on a "request/response" basis. You choose a data source, map your request to the data source's input parameters, and then map the data source's response back to the query/mutation's return type. Custom resolvers provide the benefit of no cold starts, less infrastructure to manage, and no additional charge for Lambda function invocations. Review
Choosing between custom resolver and function
.
In your
amplify/data/resource.ts
file, define a custom handler using
a.handler.custom
.
By default, you'll be able to access any existing database tables (powered by Amazon DynamoDB) using
a.ref('MODEL_NAME')
. But you can also reference any other external data source from within your AWS account, by adding them to your backend definition.
The supported data sources are:
Amazon DynamoDB
AWS Lambda
Amazon RDS databases with Data API
Amazon EventBridge
OpenSearch
HTTP endpoints
You can add these additional data sources via our
amplify/backend.ts
file:
In your schema you can then reference these additional data sources based on their name:
All handlers must be of the same type. For example, you can't mix and match
a.handler.function
with
a.handler.custom
within a single
.handler()
modifier.
From your generated Data client, you can find all your custom queries and mutations under the
client.queries.
and
client.mutations.
APIs respectively.
Custom query
Custom mutation
Custom operations can accept different types of arguments. Understanding these options helps define flexible and well-structured APIs.
When defining a custom operation, you can specify arguments using different types:
Scalar Fields
: Basic types such as
string
,
integer
,
float
, etc
Custom Types
: Define inline
customType
Reference Types
: Use
a.ref()
to reference enums and custom types
Async function handlers allow you to execute long-running operations asynchronously, improving the responsiveness of your API. This is particularly useful for tasks that don't require an immediate response, such as batch processing, putting messages in a queue, and initiating a generative AI model inference.
To define an async function handler, use the
.async()
method when defining your handler:
Single Return Type
: Async handlers return a static type
EventInvocationResponse
and don't support specifying a return type. The
.returns()
method is not available for operations using async handlers.
Fire and Forget
: The client is informed whether the invocation was successfully queued, but doesn't receive data from the Lambda function execution.
Pipeline Support
: Async handlers can be used in function pipelines. If the final handler is an async function, the return type of the query or mutation is
EventInvocationResponse
.