Set up in-app messaging
Amplify allows interacting with In-App Messaging APIs, enabling you to send messages to your app users. In-App Messaging is a powerful tool to engage with your users and provide them with relevant information.
A campaign is a messaging initiative that engages a specific audience segment. A campaign sends tailored messages according to a schedule that you define. You can use the
AWS Cloud Development Kit (AWS CDK)
to create a campaign that sends messages through any single channel that is supported by Amazon Pinpoint: Mobile Push, In-App, Email, SMS or Custom channels.
The following is an example utilizing the AWS CDK to create the In-App Messaging resource powered by
Amazon Pinpoint
. Note: there are no official hand-written (L2) constructs for this service yet.
When implementing in-app messaging, please be aware of two important security considerations.
First, the endpointID generated by Amazon Pinpoint should be treated as confidential information. There is no built-in authorization mechanism based on endpointID, which means if an endpointID is compromised, other users could potentially access messages intended for different users. We recommend implementing appropriate security measures in your application to protect endpointID access.
Second, messages received from Amazon Pinpoint campaigns are delivered without any content sanitization. AWS Amplify acts as a pass-through service and does not perform any content validation or sanitization on these messages. To ensure application security, you should always sanitize message content before rendering it in your application to prevent potential security vulnerabilities such as cross-site scripting (XSS) attacks.
Note:
Campaign start time must be at least 15 minutes in future. In-app messages can only be synced to local device once the campaign becomes active (Status should be "In Progress" in the campaigns screen of the Pinpoint console).
First, install the
aws-amplify
library:
To finish setting up your application with Amplify, you need to configure it using the
configure
API. Next, to interact with In-App Messaging APIs, you need to first initialize In-App Messaging by calling the
initializeInAppMessaging
API directly imported from the
in-app-messaging
sub-path. This is required to be called as early as possible in the app lifecycle.
Make sure you call
Amplify.configure
as early as possible in your applicationâs life-cycle. A missing configuration or
NoCredentials
error is thrown if
Amplify.configure
has not been called before other Amplify JavaScript APIs.
Amazon Pinpoint Construct Library