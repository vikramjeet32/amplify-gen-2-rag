Connect to external Amazon DynamoDB data sources
The
a.model()
data model allows you to define a GraphQL schema for an AWS AppSync API where models are backed by DynamoDB Tables managed by Amplify. The generated schema also provides queries and mutations to the Amplify Data client. However, you may want to connect to an external DynamoDB table and execute custom business logic against it instead.
Using an external DynamoDB table as a data source may be useful if you need to leverage patterns such as single table design.
In the following sections, we walk through the steps to add and use an external DynamoDB table as a data source for your API:
Set up your Amazon DynamoDB table
Add your Amazon DynamoDB table as a data source
Define custom queries and mutations
Configure custom business logic handler code
Invoke custom queries or mutations
For the purpose of this guide we will define a
Post
type and create an external DynamoDB table that will store records for it. In Amplify Gen 2,
customType
adds a type to the schema that is not backed by an Amplify-generated DynamoDB table.
With the
Post
type defined, it can then be referenced as the return type when defining your custom queries and mutations.
First, add the
Post
custom type to your schema:
NOTE:
To comply with the GraphQL spec, at least one query is required for a schema to be valid. Otherwise, deployments will fail with a schema error. The Amplify Data schema is auto-generated with a
Todo
model and corresponding queries under the hood. You can leave the
Todo
model in the schema until you add the first custom query to the schema in the next steps.
Once the deployment successfully completes, navigate to the AppSync console and select your Amplify-generated API. Follow these steps to create a new DynamoDB table:
On the
Schema
page, choose
Create Resources
.
Choose
Use existing type
, then choose the
Post
type.
Set the
Primary key
to
id
and the
Sort key
to
None
.
Disable
Automatically generate GraphQL
. In this example, we'll create the resolver ourselves.
Choose
Create
.
You now have a new DynamoDB table named
PostTable
, which you can see by visiting
Data sources
in the side tab. You will use this table as the data source for your custom queries and mutations to your Amazon DynamoDB table.
In your
amplify/backend.ts
file, add your DynamoDB table as a data source for your API:
Now that your DynamoDB table has been added as a data source, you can reference it in custom queries and mutations using the
a.handler.custom()
modifier which accepts the name of the data source and an entry point for your resolvers.
Use the following code examples to add
addPost
,
getPost
,
updatePost
, and
deletePost
as custom queries and mutations to your schema:
addPost
getPost
updatePost
deletePost
Next, create the following files in your
amplify/data
folder and use the code examples to define custom resolvers for the custom queries and mutations added to your schema from the previous step. These are AppSync JavaScript resolvers
addPost
getPost
updatePost
deletePost
From your generated Data client, you can find all your custom queries and mutations under the client.queries. and client.mutations. APIs respectively.
addPost
getPost
updatePost
deletePost
In this guide, youâve added an external DynamoDB table as a data source to an Amplify GraphQL API and defined custom queries and mutations, handled by AppSync JS resolvers, to manipulate Post items in an external DynamoDB table using the Amplify Gen 2 Data client.
To clean up, you can delete your sandbox by accepting the prompt when terminating the sandbox process in your terminal. Alternatively, you can also use the AWS Amplify console to manage and delete sandbox environments.
To delete your external DynamoDB table, you can navigate to the AppSync console and click on the name of the table in the data sources list. This takes you to the DynamoDB console where you can delete the table.
Reference
- The
GetItem
request lets you tell the AWS AppSync DynamoDB function to make a
GetItem
request to DynamoDB, and enables you to specify:
The key of the item in DynamoDB
Whether to use a consistent read or not
Example:
PutItem
- The
PutItem
request mapping document lets you tell the AWS AppSync DynamoDB function to make a
PutItem
request to DynamoDB, and enables you to specify the following:
The key of the item in DynamoDB
The full contents of the item (composed of key and attributeValues)
Conditions for the operation to succeed
Example:
UpdateItem
- The
UpdateItem
request enables you to tell the AWS AppSync DynamoDB function to make a
UpdateItem
request to DynamoDB and allows you to specify the following:
The key of the item in DynamoDB
An update expression describing how to update the item in DynamoDB
Conditions for the operation to succeed
Example:
DeleteItem
- The
DeleteItem
request lets you tell the AWS AppSync DynamoDB function to make a
DeleteItem
request to DynamoDB, and enables you to specify the following:
The key of the item in DynamoDB
Conditions for the operation to succeed
Example:
Query
- The Query request object lets you tell the AWS AppSync DynamoDB resolver to make a Query request to DynamoDB, and enables you to specify the following:
Key expression
Which index to use
Any additional filter
How many items to return
Whether to use consistent reads
query direction (forward or backward)
Pagination token
Example:
Scan
- The
Scan
request lets you tell the AWS AppSync DynamoDB function to make a
Scan
request to DynamoDB, and enables you to specify the following:
A filter to exclude results
Which index to use
How many items to return
Whether to use consistent reads
Pagination token
Parallel scans
Example:
Sync
- The
Sync
request object lets you retrieve all the results from a DynamoDB table and then receive only the data altered since your last query (the delta updates).
Sync
requests can only be made to versioned DynamoDB data sources. You can specify the following:
Example:
BatchGetItem
- The
BatchGetItem
request object lets you tell the AWS AppSync DynamoDB function to make a
BatchGetItem
request to DynamoDB to retrieve multiple items, potentially across multiple tables. For this request object, you must specify the following:
The DynamoDB
BatchGetItem
limits apply and
no condition expression
can be provided.
Example:
BatchDeleteItem
- The BatchDeleteItem request object lets you tell the AWS AppSync DynamoDB function to make a BatchWriteItem request to DynamoDB to delete multiple items, potentially across multiple tables. For this request object, you must specify the following:
The DynamoDB
BatchWriteItem
limits apply and
no condition expression
can be provided.
Example:
BatchPutItem
- The
BatchPutItem
request object lets you tell the AWS AppSync DynamoDB function to make a
BatchWriteItem
request to DynamoDB to put multiple items, potentially across multiple tables. For this request object, you must specify the following:
The DynamoDB
BatchWriteItem
limits apply and
no condition expression
can be provided.
Example:
TransactGetItems
- The
TransactGetItems
request object lets you to tell the AWS AppSync DynamoDB function to make a
TransactGetItems
request to DynamoDB to retrieve multiple items, potentially across multiple tables. For this request object, you must specify the following:
The DynamoDB
TransactGetItems
limits apply and
no condition expression
can be provided.
Example:
TransactWriteItems
- The
TransactWriteItems
request object lets you tell the AWS AppSync DynamoDB function to make a
TransactWriteItems
request to DynamoDB to write multiple items, potentially to multiple tables. For this request object, you must specify the following:
The destination table name of each request item
The operation of each request item to perform. There are four types of operations that are supported:
PutItem
,
UpdateItem
,
DeleteItem
, and
ConditionCheck
The key of each request item to write
The DynamoDB
TransactWriteItems
limits apply.
Example: