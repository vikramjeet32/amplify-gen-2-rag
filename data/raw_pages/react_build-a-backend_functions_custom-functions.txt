Custom functions
AWS Amplify Gen 2 functions are AWS Lambda functions that can be used to perform tasks and customize workflows in your Amplify app. Functions can be written in Node.js, Python, Go, or any
other language supported by AWS Lambda
.
Note:
The following options in
defineFunction
are not supported for Custom Functions:
You'll need to configure these options directly in your CDK Function definition instead. However,
resourceGroupName
property is supported and can be used to group related resources together in your
defineFunction
definition.
In this guide, you will learn how to create Python and Go functions with Amplify functions. The examples shown in this guide do not use Docker to build functions. Instead, the examples use commands that run on your host system to build, and as such require the necessary tooling for the language you are using for your functions.
To get started, create a new directory and a resource file,
amplify/functions/say-hello/resource.ts
. Then, define the function with
defineFunction
:
Next, create the corresponding handler file at
amplify/functions/say-hello/index.py
. This is where your function code will go.
The handler file
must
export a function named "handler". This is the entry point to your function. For more information on writing functions, refer to the
AWS documentation for Lambda function handlers using Python
.
If you need Python packages, you can add them to a
requirements.txt
file in the same directory as your handler file. The
bundling
option in the
Code.fromAsset
method will install these packages for you.
Create a
requirements.txt
file in the same directory as your handler file. This file should contain the names of the packages you want to install. For example:
You're now ready to deploy your python function. Next is the same process as the Node.js/TypeScript function. Go to
Common steps for all languages
to continue.
To get started, Create a new directory and a resource file,
amplify/functions/say-hello/resource.ts
. Then, define the function with
defineFunction
:
Next, create the corresponding handler file at
amplify/functions/say-hello/main.go
. This is where your function code will go.
Then you should run the following command to build the go function:
then run to install the dependencies.
You're now ready to deploy your golang function. Next is the same process as the Node.js/TypeScript function.
Regardless of the language used, your function needs to be added to your backend.
Now when you run
npx ampx sandbox
or deploy your app on Amplify, it will include your function.
To invoke your function, we recommend adding your
function as a handler for a custom query with your Amplify Data resource
. To get started, open your
amplify/data/resource.ts
file and specify a new query in your schema:
Custom function may require
Docker
in order to build and bundle function's code. A deployment failing with
CustomFunctionProviderDockerError
error indicates that a custom function requires Docker but the Docker daemon was not found. In that case you need to provide a working Docker installation at runtime.
Ensure that Docker is installed on your computer and that Docker daemon is running. You can check if Docker daemon is running using the following command:
Amplify does not provide Docker daemon out of the box in branch deployments. However, you have an option to provide
your own image that meets Amplify requirements
and includes a Docker installation.
For example, the
aws/codebuild/amazonlinux-x86_64-standard:5.0
image (
see definition
) meets Amplify requirements and includes Docker installation.