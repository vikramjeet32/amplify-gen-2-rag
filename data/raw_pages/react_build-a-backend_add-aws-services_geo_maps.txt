Work with maps
First, ensure you've provisioned an Amazon Location Service Map resource and configured your app using the instructions in either
Set up map
or
Use existing resources
guide.
To render a map, the
MapLibre GL
and the
maplibre-gl-js-amplify
libraries are required. MapLibre GL is an open source map rendering library and
maplibre-gl-js-amplify
library makes it easy to integrate MapLibre with Amplify Geo and handles Authentication.
Add the dependencies to your app:
Verify the following:
maplibre-gl-js-amplify
version
4.0.0
or above is installed
Any package bundlers (webpack, rollup, etc) are configured to handle css files. Check out the webpack documentation
here
.
Import the library into your application:
Next, create and render the
Map
with the help of
createMap
.
Note:
There must be a
div
with an
id="map"
on the DOM before making the call to
createMap
in this way.
To render a map using a className or something other than the ID you can pass in a reference to the HTML Element itself.
The MapLibre canvas requires a defined height to display properly, otherwise you may end up with a blank screen where the map is supposed to be.
The
amplify-map.css
file has a few commonly used methods for setting the height of the map component. You can add some of the examples listed to your own styles or directly import
amplify-map.css
like so:
To render a map using percentage based height you need to ensure that all ancestor elements to the map container have a height:
To display markers on a map, use the
drawPoints
function.
drawPoints
expects:
sourceName
- specifies the layer on which the markers are rendered on. You can edit existing markers by passing the same
sourceName
coordinate data - (longitude, latitude) the coordinate data of the markers to be displayed
a maplibre-gl-js Map - the map object on which to render the markers
First, import the
drawPoints
method in your app. Your import section should include look like this
The
drawPoints
method returns ids of the source and layers used to display the markers on the map. These ids can be used for further customization through maplibre-gl-js
source
,
paint
, and
layer
options.
For more information about the parameters and options that can be used with
drawPoints
check the documentation
here
.
Next, use the following code snippet when you want to display the markers on the map. Add it to the
initializeMap()
function if you want the markers to show up on map load.
The
getAvailableMaps
API fetches information for all maps that are available to be displayed.
This is useful if you would like to give your users a variety of maps styles to choose from.
The available maps are returned as an array with the following contents:
You can resize and customize a map with the
resize
and
setStyle
functions:
When it's time to remove the map from the DOM, you can use the
.remove
method of the generated map. This will clean up and release all resources associated with the map (DOM elements, event bindings, web workers, and WebGL resources).
After calling
.remove()
, you must not call any other methods on the map.
For React users:
Not removing the map on component unmount can cause memory leaks in your application. It's recommended to call
.remove()
in either the return function of a React
useEffect
hook or the
componentWillUnmount
lifecycle hook of a class component.
To display a map on your html website, add the following scripts to your html webpage.
Next, add a div element with id
map
anywhere in your webpage where you want to render the map. Include the following code snippet to configure Amplify (update the
amplify_outputs.json
file path accordingly) and instantiate the map.
If you want more information about the maps you currently have configured or want a way to switch between maps programmatically, the
@aws-amplify/geo
package provides API's that return more information about your currently provisioned maps.
First, you need to import Geo from the
@aws-amplify/geo
package.
getAvailableMaps
will return the map resources you currently have provisioned in your Amplify project. You can switch between any of these different maps and display their different map styles.
API
Parameters
Return
The return from
getAvailableMaps
is a Promise that resolves to
AmazonLocationServiceMapStyle[]
which is an array of
mapName
,
style
, and
region
.
Each object has the following properties:
mapName
- name of the map you created.
style
- the Amazon Location Service style used to create the map.
region
- the AWS region the map is hosted in.
Note:
When changing a map with Amplify and MapLibre the
setStyle
function should be called with the name of the Location Service map NOT the style. This is because the
transformRequest
function uses the Location Service map name to make a new request for map tile data.
Example
getDefaultMap
is used to get a the default map object.
API
Parameters
Return
The return from
getDefaultMap
is a Promise that resolves to a AmazonLocationServiceMapStyle object.
The object has the following properties:
mapName
- name of the map you created.
style
- the Amazon Location Service style used to create the map.
region
- the AWS region the map is hosted in.
Example