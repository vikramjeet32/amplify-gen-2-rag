Connect to Amazon Polly for Text-To-Speech APIs
Amazon Polly is a text-to-speech (TTS) service offered by Amazon Web Services (AWS). It uses advanced deep learning technologies to convert written text into lifelike speech, enabling you to create applications with speech capabilities in various languages and voices.
With Amazon Polly, you can easily add voice interactions and accessibility features to your applications. The service supports a wide range of use cases, such as providing audio content for the visually impaired, enhancing e-learning experiences, creating interactive voice response (IVR) systems, and more.
Key features of Amazon Polly include:
Multiple Voices and Languages
: Amazon Polly supports dozens of voices across various languages and dialects, giving you the flexibility to choose the most appropriate voice for your use case.
High-Quality Speech
: Amazon Polly's neural and standard voices offer natural and realistic speech quality.
Speech Marks and Speech Synthesis Markup Language
: Customize your speech output with Speech Synthesis Markup Language tags and obtain speech timing information with speech marks.
Scalable and Cost-Effective
: Amazon Polly's pay-as-you-go pricing model makes it a cost-effective solution for adding speech capabilities to your applications.
In this section, you'll learn how to integrate Amazon Polly into your application using AWS Amplify, enabling you to leverage its powerful text-to-speech capabilities seamlessly.
Set up your project by following the instructions in the
Quickstart guide
.
We'll create a new API endpoint that'll use the the AWS SDK to call the Amazon Polly service. To install the Amazon Polly SDK, run the following command in your project's root folder:
Create a file named
amplify/storage/resource.ts
and add the following content to configure a storage resource:
To access Amazon Polly service, you need to configure the proper IAM policy for Lambda to utilize the desired feature effectively. Update the
amplify/backend.ts
file with the following code to add the necessary permissions to a lambda's Role policy.
Define the function handler by creating a new file,
amplify/data/convertTextToSpeech.ts
. This function converts text into speech using Amazon Polly and stores the synthesized speech as an MP3 file in an S3 bucket.
In your
amplify/data/resource.ts
file, define the function using defineFunction and then reference the function with your mutation using a.handler.function() as a handler.
NOTE:
At least one query is required for a schema to be valid. Otherwise, deployments will fail a schema error. The Amplify Data schema is auto-generated with a
Todo
model and corresponding queries under the hood. You can leave the
Todo
model in the schema until you add the first custom query to the schema in the next steps.
Customize your storage settings to manage access to various paths within your storage bucket. It's necessary to update the Storage resource to provide access to the
convertTextToSpeech
resource. Modify the file
amplify/storage/resource.ts
as shown below.
Import and load the configuration file in your app. It's recommended you add the Amplify configuration step to your app's root entry point.
Example frontend code to create an audio buffer for playback using a text input.