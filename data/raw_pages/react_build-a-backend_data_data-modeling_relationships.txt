Modeling relationships
When modeling application data, you often need to establish relationships between different data models. In Amplify Data, you can create one-to-many, one-to-one, and many-to-many relationships in your Data schema. On the client-side, Amplify Data allows you to lazy or eager load of related data.
With Amplify Data Construct
@aws-amplify/data-construct@1.8.4
, an improvement was made to how relational field data is handled in subscriptions when different authorization rules apply to related models in a schema. The improvement redacts the values for the relational fields, displaying them as null or empty, to prevent unauthorized access to relational data.
This redaction occurs whenever it cannot be determined that the child model will be protected by the same permissions as the parent model.
Because subscriptions are tied to mutations and the selection set provided in the result of a mutation is then passed through to the subscription, relational fields in the result of mutations must be redacted.
If an authorized end-user needs access to the redacted relational fields, they should perform a query to read the relational data.
Additionally, subscriptions will inherit related authorization when relational fields are set as required. To better protect relational data, consider modifying the schema to use optional relational fields.
Create a one-to-many relationship between two models using the
hasMany()
and
belongsTo()
method. In the example below, a Team has many Members and a Member belongs to exactly one Team.
Create a
reference field
called
teamId
on the
Member
model. This reference field's type
MUST
match the type of
Team
's identifier. In this case, it's an auto-generated
id: a.id().required()
field.
Add a
relationship field
called
team
that references the
teamId
field. This allows you to query for the team information from the
Member
model.
Add a
relationship field
called
members
that references the
teamId
field on the
Member
model.
If your reference field is not required, then you can "delete" a one-to-many relationship by setting the relationship value to
null
.
Create a one-to-one relationship between two models using the
hasOne()
and
belongsTo()
methods. In the example below, a
Customer
has a
Cart
and a
Cart
belongs to a
Customer
.
Create a
reference field
called
customerId
on the
Cart
model. This reference field's type
MUST
match the type of
Customer
's identifier. In this case, it's an auto-generated
id: a.id().required()
field.
Add a
relationship field
called
customer
that references the
customerId
field. This allows you to query for the customer information from the
Cart
model.
Add a
relationship field
called
activeCart
that references the
customerId
field on the
Cart
model.
To create a "has one" relationship between records, first create the parent item and then create the child item and assign the parent.
To update a "Has One" relationship between records, you first retrieve the child item and then update the reference to the parent to another parent. For example, to reassign a Cart to another Customer:
You can set the relationship field to
null
to delete a "Has One" relationship between records.
In order to create a many-to-many relationship between two models, you have to create a model that serves as a "join table". This "join table" should contain two one-to-many relationships between the two related entities. For example, to model a
Post
that has many
Tags
and a
Tag
has many
Posts
, you'll need to create a new
PostTag
model that represents the relationship between these two entities.
const
schema
=
a
.
schema
(
{
Copy
highlighted code example
postId
:
a
.
id
(
)
.
required
(
)
,
tagId
:
a
.
id
(
)
.
required
(
)
,
Copy
highlighted code example
post
:
a
.
belongsTo
(
'Post'
,
'postId'
)
,
tag
:
a
.
belongsTo
(
'Tag'
,
'tagId'
)
,
Copy
highlighted code example
tags
:
a
.
hasMany
(
'PostTag'
,
'postId'
)
,
Copy
highlighted code example
posts
:
a
.
hasMany
(
'PostTag'
,
'tagId'
)
,
}
)
.
authorization
(
(
allow
)
=>
allow
.
publicApiKey
(
)
)
;
Relationships are defined uniquely by their reference fields. For example, a Post can have separate relationships with a Person model for
author
and
editor
.
const
schema
=
a
.
schema
(
{
title
:
a
.
string
(
)
.
required
(
)
,
content
:
a
.
string
(
)
.
required
(
)
,
Copy
highlighted code example
author
:
a
.
belongsTo
(
'Person'
,
'authorId'
)
,
editor
:
a
.
belongsTo
(
'Person'
,
'editorId'
)
,
Copy
highlighted code example
editedPosts
:
a
.
hasMany
(
'Post'
,
'editorId'
)
,
authoredPosts
:
a
.
hasMany
(
'Post'
,
'authorId'
)
,
}
)
.
authorization
(
(
allow
)
=>
allow
.
publicApiKey
(
)
)
;
On the client-side, you can fetch the related data with the following code:
In cases where your data model uses sort keys in the identifier, you need to also add reference fields and store the sort key fields in the related data model:
const
schema
=
a
.
schema
(
{
title
:
a
.
string
(
)
.
required
(
)
,
content
:
a
.
string
(
)
.
required
(
)
,
Copy
highlighted code example
author
:
a
.
belongsTo
(
'Person'
,
[
'authorName'
,
'authorDoB'
]
)
,
name
:
a
.
string
(
)
.
required
(
)
,
dateOfBirth
:
a
.
date
(
)
.
required
(
)
,
authoredPosts
:
a
.
hasMany
(
'Post'
,
[
'authorName'
,
'authorDoB'
]
)
,
Copy
highlighted code example
}
)
.
identifier
(
[
'name'
,
'dateOfBirth'
]
)
,
}
)
.
authorization
(
(
allow
)
=>
allow
.
publicApiKey
(
)
)
;
Amplify Data's relationships use reference fields to determine if a relationship is required or not. If you mark a reference field as required, then you can't "delete" a relationship between two models. You'd have to delete the related record as a whole.
const
schema
=
a
.
schema
(
{
title
:
a
.
string
(
)
.
required
(
)
,
content
:
a
.
string
(
)
.
required
(
)
,
Copy
highlighted code example
authorId
:
a
.
id
(
)
.
required
(
)
,
author
:
a
.
belongsTo
(
'Person'
,
'authorId'
)
,
Copy
highlighted code example
editor
:
a
.
belongsTo
(
'Person'
,
'editorId'
)
,
Copy
highlighted code example
editedPosts
:
a
.
hasMany
(
'Post'
,
'editorId'
)
,
authoredPosts
:
a
.
hasMany
(
'Post'
,
'authorId'
)
,
}
)
.
authorization
(
(
allow
)
=>
allow
.
publicApiKey
(
)
)
;