Customize your auth rules
Use the
.authorization()
modifier to configure authorization rules for public, signed-in user, per user, and per user group data access.
Authorization rules operate on the deny-by-default principle
. Meaning that if an authorization rule is not specifically configured, it is denied.
In the example above, everyone (
public
) can read every Post but authenticated users (
owner
) can create, read, update, and delete their own posts. Amplify also allows you to restrict the allowed operations, combine multiple authorization rules, and apply fine-grained field-level authorization.
Use the guide below to select the correct authorization strategy for your use case:
Authorization rules can be applied globally across all data models in a schema, onto specific data models, and onto specific fields.
Amplify will always use the most specific authorization rule that is available. For example, if there is an authorization rule for a field and an authorization rule for the model that the field belongs to, Amplify will evaluate against the field-level authorization rule. Review
Field-level authorization rules
to learn more.
If there are multiple authorization rules present, they will be logically OR'ed. Review
Configure multiple authorization rules
to learn more. For
userPools
and
oidc
authorization modes, the rules are evaluated in the sequence
authenticated
>
group(s)
>
owner(s)DefinedIn
>
group(s)DefinedIn
.
To help you get started, you can define an authorization rule on the data schema that will be applied to all data models that
do not
have a model-level authorization rule. Instead of having a global authorization rule for all production environments, we recommend creating specific authorization rules for each model or field.
The global authorization rule below uses
allow.publicApiKey()
. This example allows anyone to create, read, update, and delete and is applied to every data model.
Add an authorization rule to a model to apply the authorization rule to all fields of that model.
When an authorization rule is added to a field, it will strictly define the authorization rules applied on the field. Field-level authorization rules
do not
inherit model-level authorization rules. Meaning, only the specified field-level authorization rule is applied.
In the example below:
Owners are allowed to create, read, update, and delete Employee records they own
Any signed in user has read access and can read data with the exception of the
ssn
field
Only the
ssn
field has
owner
auth applied and this field-level auth rule means that model-level auth rules are not applied
Non-model
types are any types added to the schema without using
a.model()
. These consist of modifiers such as
a.customType()
,
a.enum()
,
a.query()
,
a.mutation()
, or
a.subscription()
.
Dynamic authorization rules such as
allow.owner()
,
allow.ownerDefinedIn()
,
allow.groupDefinedIn()
are not supported for
non-model
types.
There are TS warnings and validation checks in place that will cause a sandbox deployment to fail if unsupported auth rules are defined on custom queries and mutations.
When combining multiple authorization rules, they are "logically OR"-ed. In the following example:
Any user (using Amazon Cognito identity pool's unauthenticated roles) is allowed to read all posts
Owners are allowed to create, read, update, and delete their own posts
On the client side, make sure to always authenticate with the corresponding authorization mode.
All Amplify Gen 2 projects enable IAM authorization for data access. This ensures that the Amplify console's
data manager
will be able to access your API. It also allows you to authorize other administrative or machine-to-machine access using your own IAM policies. See the
AWS AppSync Developer Guide
for details on how AWS AppSync works with IAM.
Authorization rules are only supported on data models (model-level and field-level) and custom operations (queries, mutations and subscriptions). They are not fully supported on custom types, including custom types returned by custom operations. For example, consider a custom query that returns a custom type:
As you can see, the custom
Counter
type does not support the
.authorization()
modifier. Instead, behind the scenes, Amplify will add appropriate authorization rules to
Counter
to allow authenticated users to access it. That means that any signed-in user will be able to access the custom operation and all fields of the custom type.
Note
: IAM authorization is not currently supported for custom operations that return custom types if
defaultAuthorizationMode
is not
iam
. See
GitHub issue #2929
for details and suggested workarounds.