Tokens and credentials
Amplify Auth interacts with its underlying
Amazon Cognito user pool
as an OpenID Connect (OIDC) provider. When users successfully authenticate you receive OIDC-compliant JSON web tokens (JWT). These tokens are used to
identity
your user, and
access
resources.
Access tokens
are used to verify the bearer of the token (i.e. the Cognito user) is authorized to perform an action against a resource. Below is an example payload of an access token vended by Cognito:
ID tokens
are intended to be used within your frontend application only. This token contains personally identifiable information (PII) and should not be used to authorize access against a resource. Below is an example of an ID token with the default Amplify Auth configuration of email and password auth.
When additional user attributes are specified for Amplify Auth, their values will be found in the ID token. For example, if a
nickname
attribute is requested it will be available on the ID token with the
nickname
claim:
Conversely, user pool group claims are found in both the access token and ID token on the
cognito:groups
claim:
Visit the
AWS documentation for using tokens with Cognito user pools
to learn more about tokens, how they're used with Cognito, and their intended usage.
Token keys are automatically rotated for you for added security but you can update how they are stored, customize the refresh rate and expiration times, and revoke tokens on sign-out.
You can update the storage mechanism to choose where and how tokens are persisted in your application. The default option is
localStorage
. Additionally, you can import the
sessionStorage
,
sharedInMemoryStorage
or
CookieStorage
options as well.
If you want to customize your own mechanism, you can import the
KeyValueStorageInterface
interface and implement it in your own class.
Browser Local Storage
In Amplify the
localStorage
is the default storage mechanism. It saves the tokens in the browser's
localStorage
. This local storage will persist across browser sessions and tabs. You can explicitly set to this storage by calling:
Cookie Storage
CookieStorage
saves the tokens in the browser's
Cookies
. The cookies will persist across browser sessions and tabs. You can explicitly set to this storage by calling:
Browser Session Storage
sessionStorage
saves the tokens in the browser's
sessionStorage
and these tokens will clear when a tab is closed. The benefit to this storage mechanism is that the session only lasts as long as the browser is open and you can sign out users when they close the tab. You can update to this storage by calling:
Custom Storage
You can implement your own custom storage mechanism by creating a class that implements the storage interface. Here is an example that uses memory storage:
When you get the current user session, the tokens will be saved in your custom location.
Token revocation is enabled automatically in Amplify Auth. To revoke tokens you can set up global sign-out with
signOut({ global: true })
to globally sign out your user from all of their devices.