Working with files/attachments
The Storage and GraphQL API categories can be used together to associate a file, such as an image or video, with a particular record. For example, you might create a
User
model with a profile picture, or a
Post
model with an associated image. With Amplify's GraphQL API and Storage categories, you can reference the file within the model itself to create an association.
Set up your project by following the instructions in the
Quickstart guide
.
Open
amplify/data/resource.ts
and add the following model as shown below:
Next, Let's configure Storage and allow access to all authenticated(signed in) users of your application. create a file
amplify/storage/resource.ts
and add the following code,This will restrict file access to only the signed-in user.
Configure the storage in the
amplify/backend.ts
file as demonstrated below:
Your application needs authorization credentials for reading and writing to both Storage and the Data, except in the case where all data and files are intended to be publicly accessible.
The Storage and Data categories govern data access based on their own authorization patterns, meaning that it's necessary to configure appropriate auth roles for each individual category. Although both categories share the same access credentials set up through the Auth category, they work independently from one another. For instance, adding an
allow.authenticated()
to the Data does not guard against file access in the Storage category. Likewise, adding authorization rules to the Storage category does not guard against data access in the API.
When you configure Storage, Amplify will configure appropriate IAM policies on the bucket using a Cognito Identity Pool role. You will then have the option of adding CRUD (Create, Update, Read and Delete) based permissions as well, so that Authenticated and Guest users will be granted limited permissions within these levels.
Even after adding this configuration, all Storage access is still
guest
by default.
To guard against accidental public access, the Storage access levels must either be configured on the Storage object globally, or set within individual function calls. This guide uses the former approach, setting all Storage access to
authenticated
users.
The ability to independently configure authorization rules for each category allows for more granular control over data access, and adds greater flexibility. For scenarios where authorization patterns must be mixed and matched, configure the access level on individual Storage function calls. For example, you may want to use
entity_id
CRUD access on an individual Storage function call for files that should only be accessible by the owner (such as personal files),
authenticated
read access to allow all logged in users to view common files (such as images in a shared photo album), and
guest
read access to allow all users to view a file (such as a public profile picture).
For more details on how to configure Storage authorization levels, see the
Storage documentation
. For more on configuring Data authorization, see the
API documentation
.
You can create a record via the Amplify Data client, upload a file to Storage, and finally update the record to associate it with the uploaded file. Use the following example with the Amplify Data client and Amplify Storage library helpers,
uploadData
and
getUrl
, to create a record and associate it the file with the record.
The API record's
id
is prepended to the Storage file name to ensure uniqueness. If this is excluded, multiple API records could then be associated with the same file path unintentionally.
To associate a file with a record, update the record with the path returned by the Storage upload. The following example uploads the file using Storage, updates the record with the file's path, then retrieves the signed URL to download the image. If an image is already associated with the record, this will update the record with the new image.
To retrieve the file associated with a record, first query the record, then use Storage to get the signed URL. The signed URL can then be used to download the file, display an image, etc:
There are three common deletion workflows when working with Storage files and the GraphQL API:
Remove the file association, continue to persist both file and record.
Remove the record association and delete the file.
Delete both file and record.
The following example removes the file association from the record, but does not delete the file from S3, nor the record from the database.
The following example removes the file from the record, then deletes the file from S3:
You may want to add multiple files to a single record, such as a user profile with multiple images. To do this, you can add a list of file keys to the record. The following example adds a list of file keys to a record:
Add the following model in `amplify/data/resource.ts" file.
CRUD operations when working with multiple files is the same as when working with a single file, with the exception that we are now working with a list of image keys, as opposed to a single image key.
First create a record via the GraphQL API, then upload the files to Storage, and finally add the associations between the record and files.
To associate additional files with a record, update the record with the paths returned by the Storage uploads.
Updating a file for an associated record is the same as updating a file for a single file record, with the exception that you will need to update the list of file keys.
To retrieve the files associated with a record, first query the record, then use Storage to retrieve all of the signed URLs.
The workflow for deleting and removing files associated with API records is the same as when working with a single file, except that when performing a delete you will need to iterate over the list of file paths and call
Storage.remove()
for each file.
Remove the file association, continue to persist both files and record
Remove the record association and delete the files
Delete record and all associated files
The recommended access patterns in these docs attempt to remove deleted files, but favor leaving orphans over leaving records that point to non-existent files. This optimizes for read latency by ensuring clients
rarely
attempt to fetch a non-existent file from Storage. However, any app that deletes files can inherently cause records
on-device
to point to non-existent files.
One example is when we
create an API record, associate the Storage file with that record, and then retrieve the file's signed URL
. "Device A" calls the GraphQL API to create
API_Record_1
, and then associates that record with
First_Photo
. Before "Device A" is about to retrieve the signed URL, "Device B" might query
API_Record_1
, delete
First_Photo
, and update the record accordingly. However, "Device A" is still using the old
API_Record_1
, which is now out-of-date. Even though the shared global state is correctly in sync at every stage, the individual device ("Device A") has an out-of-date record that points to a non-existent file. Similar issues can conceivably occur for updates. Depending on your app, some of these mismatches can be minimized
even more
with
real-time data / GraphQL subscriptions
.
It is important to understand when these mismatches can occur and to add meaningful error handling around these cases. This guide does not include exhaustive error handling, real-time subscriptions, re-querying of outdated records, or attempts to retry failed operations. However, these are all important considerations for a production-level application.
Single File (TS)
Multi-File (TS)