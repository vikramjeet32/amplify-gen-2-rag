Subscribe to real-time events
In this guide, we will outline the benefits of enabling real-time data integrations and how to set up and filter these subscriptions. We will also cover how to unsubscribe from subscriptions.
Before you begin, you will need:
With Amplify Data Construct
@aws-amplify/data-construct@1.8.4
, an improvement was made to how relational field data is handled in subscriptions when different authorization rules apply to related models in a schema. The improvement redacts the values for the relational fields, displaying them as null or empty, to prevent unauthorized access to relational data.
This redaction occurs whenever it cannot be determined that the child model will be protected by the same permissions as the parent model.
Because subscriptions are tied to mutations and the selection set provided in the result of a mutation is then passed through to the subscription, relational fields in the result of mutations must be redacted.
If an authorized end-user needs access to the redacted relational fields, they should perform a query to read the relational data.
Additionally, subscriptions will inherit related authorization when relational fields are set as required. To better protect relational data, consider modifying the schema to use optional relational fields.
The recommended way to fetch a list of data is to use
observeQuery
to get a real-time list of your app data at all times. You can integrate
observeQuery
with React's
useState
and
useEffect
hooks in the following way:
observeQuery
fetches and paginates through all of your available data in the cloud. While data is syncing from the cloud, snapshots will contain all of the items synced so far and an
isSynced
status of
false
. When the sync process is complete, a snapshot will be emitted with all the records in the local store and an
isSynced
status of
true
.
Missing real-time events and model fields
If you don't see all of the real-time events and model fields you expect to see, here are a few things to look for.
Authorization
The model's
authorization rules
must grant the appropriate rights to the user.
If the authorization rules are correct, also ensure the session is authenticated as expected.
Selection Set Parity
All of the fields you expect to see in a real-time update must be present in the selection set of the
mutation
that triggers it. A mutation essentially "provides" the fields via its selection set that the corresponding subscription can then select from.
One way to address this is to use a common selection set variable for both operations. For example:
This works well if all subscriptions to
Blog
require the same subset of fields. If multiple subscriptions are involved with various selection sets, you must ensure that all
Blog
mutations contain the superset of fields from all subscriptions.
Alternatively, you can skip the custom selection sets entirely. The internally generated selection set for any given model is identical across operations by default. The trade-off is that the default selection sets exclude related models. So, when related models are required, you would need to either lazy load them or construct a query to fetch them separately.
Mutations do not trigger real-time updates for
related
models. This is true even when the subscription includes a related model in the selection set. For example, if we're subscribed to a particular
Blog
and wish to see updates when a
Post
is added or changed, it's tempting to create  a subscribe on
Blog
and assume it "just works":
But, mutations on
Post
records won't trigger an real-time event for the related
Blog
. If you need
Blog
updates when a
Post
is added, you must manually "touch" the relevant
Blog
record.
Close accordion
Subscriptions is a feature that allows the server to send data to its clients when a specific event happens. For example, you can subscribe to an event when a new record is created, updated, or deleted through the API. Subscriptions are automatically available for any
a.model()
in your Amplify Data schema.
Subscriptions take an optional
filter
argument to define service-side subscription filters:
If you want to get all subscription events, don't specify any
filter
parameters.
Limitations:
Specifying an empty object
{}
as a filter is
not
recommended. Using
{}
as a filter might cause inconsistent behavior based on your data model's authorization rules.
If you're using dynamic group authorization and you authorize based on a single group per record, subscriptions are only supported if the user is part of five or fewer user groups.
Additionally, if you authorize by using an array of groups (
groups: [String]
),
subscriptions are only supported if the user is part of 20 or fewer groups
you can only authorize 20 or fewer user groups per record
Now that your application is set up and using subscriptions, you may want to know when the subscription is finally established, or reflect to your users when the subscription isn't healthy. You can monitor the connection state for changes through the
Hub
local eventing system.
Subscription connection states
Connected
- Connected and working with no issues.
ConnectedPendingDisconnect
- The connection has no active subscriptions and is disconnecting.
ConnectedPendingKeepAlive
- The connection is open, but has missed expected keep-alive messages.
ConnectedPendingNetwork
- The connection is open, but the network connection has been disrupted. When the network recovers, the connection will continue serving traffic.
Connecting
- Attempting to connect.
ConnectionDisrupted
- The connection is disrupted and the network is available.
ConnectionDisruptedPendingNetwork
- The connection is disrupted and the network connection is unavailable.
Disconnected
- Connection has no active subscriptions and is disconnecting.
Troubleshoot connection issues and automated reconnection
Connections between your application and backend subscriptions can be interrupted for various reasons, including network outages or the device entering sleep mode. Your subscriptions will automatically reconnect when it becomes possible to do so.
While offline, your application will miss messages and will not automatically catch up when reconnected. Depending on your use case, you may want to take action for your app to catch up when it comes back online.
Close accordion
You can also unsubscribe from events by using subscriptions by implementing the following:
Congratulations! You have finished the
Subscribe to real-time events
guide. In this guide, you set up subscriptions for real-time events and learned how to filter and cancel these subscriptions when needed.
Our recommended next steps include continuing to build out and customize your information architecture for your data. Some resources that will help with this work include: